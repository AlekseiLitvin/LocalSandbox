version: "3.9"
services:
  pg_db:
    image: postgres
    container_name: pg_db
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=vardb
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - pg_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://ol.local:5432/sonar
      SONAR_JDBC_USERNAME: root
      SONAR_JDBC_PASSWORD: root
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    network_mode: host
  minio:
    image: quay.io/minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: rootroot
    volumes:
      - minio_data:/data
    ports:
      - "9010:9000" # API calls
      - "9090:9090" # Web UI
    command: server /data --console-address ":9090"
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      # To connect from the remote host, you need to provide host and port here, see https://hub.docker.com/r/bitnami/kafka
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://ol.local:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
  redis:
    image: redis
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "7070:9090"
    volumes:
      - /home/styrn/jp/configs/prometheus:/etc/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana

volumes:
  postgres_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  minio_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  grafana-data:
    driver: local