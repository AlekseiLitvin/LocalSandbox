plugins {
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'jacoco'
    id 'java'
}

group = 'by.litvin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.kafka:spring-kafka:2.9.2'

    implementation 'com.google.guava:guava:31.1-jre'

    runtimeOnly 'org.postgresql:postgresql'

    // MapStruct mapper
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // Local object storage
    implementation 'io.minio:minio:8.4.5'

    // Prometheus metrics storage
    implementation 'io.micrometer:micrometer-registry-prometheus:1.10.5'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.8.0'
    liquibaseRuntime 'info.picocli:picocli:4.6.3'
    liquibaseRuntime 'org.yaml:snakeyaml:1.33' // to run tasks from gradle
    liquibaseRuntime 'org.postgresql:postgresql'
    implementation 'org.yaml:snakeyaml:2.0' // to run liquibase from Spring
    implementation 'org.liquibase:liquibase-core:4.20.0'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    testImplementation "org.testcontainers:testcontainers:1.18.0"
    testImplementation "org.testcontainers:junit-jupiter:1.18.0"
    testImplementation "org.testcontainers:postgresql:1.18.0"
    testImplementation "org.testcontainers:kafka:1.18.0"

}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelogs-list.yaml'
            url 'jdbc:postgresql://ol.local:5432/vardb'
            username 'root'
            password 'root'
            driver 'org.postgresql.Driver'
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "AlekseiLitvin_LocalSandbox"
        property "sonar.organization", "localsandbox"
        property "sonar.host.url", "https://sonarcloud.io"
        def projectPath = "**/*by/litvin/localsandbox"
        def exclusionList = [
                "${projectPath}/model/*",
                "${projectPath}/config/*",
                "${projectPath}/data/*",
                "${projectPath}/messaging/serializer/*",
                "${projectPath}/messaging/event/*",
                "${projectPath}/mapper/*",
                "${projectPath}/LocalSandboxApplication.*"
        ].join(', ')
        property "sonar.coverage.exclusions", exclusionList
        // property "sonar.login" should be set via SONAR_TOKEN env variable
    }
}
tasks.named('sonar').configure {
    dependsOn test
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register("unitTest", Test) {
    useJUnitPlatform {
        excludeTags "integration_test"
    }
}

tasks.register("integrationTest", Test) {
    useJUnitPlatform {
        includeTags "integration_test"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'by/litvin/localsandbox/model/*',
                    'by/litvin/localsandbox/mapper/*',
                    'by/litvin/localsandbox/data/*',
                    'by/litvin/localsandbox/messaging/event/*',
                    'by/litvin/localsandbox/messaging/serializer/*',
                    'by/litvin/localsandbox/config/*',
                    'by/litvin/localsandbox/LocalSandboxApplication.*'
            ])
        }))
    }
}
